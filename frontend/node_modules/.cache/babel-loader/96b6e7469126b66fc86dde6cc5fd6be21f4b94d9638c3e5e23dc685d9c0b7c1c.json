{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle 401 responses\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth services\nexport const authService = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getProfile: () => api.get('/auth/profile')\n};\n\n// Member services\nexport const memberService = {\n  getAll: () => api.get('/members'),\n  getById: id => api.get(`/members/${id}`),\n  create: data => api.post('/members', data),\n  update: (id, data) => api.put(`/members/${id}`, data),\n  delete: id => api.delete(`/members/${id}`),\n  search: query => api.get(`/members/search?query=${query}`),\n  filter: (status, type) => {\n    let url = '/members/filter?';\n    if (status) url += `status=${status}&`;\n    if (type) url += `type=${type}`;\n    return api.get(url);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","authService","register","userData","post","login","credentials","getProfile","get","memberService","getAll","getById","id","data","update","put","delete","search","query","filter","type","url"],"sources":["C:/ez/Work/Infomina-React-Node/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add request interceptor to include auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Handle 401 responses\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth services\r\nexport const authService = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  getProfile: () => api.get('/auth/profile')\r\n};\r\n\r\n// Member services\r\nexport const memberService = {\r\n  getAll: () => api.get('/members'),\r\n  getById: (id) => api.get(`/members/${id}`),\r\n  create: (data) => api.post('/members', data),\r\n  update: (id, data) => api.put(`/members/${id}`, data),\r\n  delete: (id) => api.delete(`/members/${id}`),\r\n  search: (query) => api.get(`/members/search?query=${query}`),\r\n  filter: (status, type) => {\r\n    let url = '/members/filter?';\r\n    if (status) url += `status=${status}&`;\r\n    if (type) url += `type=${type}`;\r\n    return api.get(url);\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG;EACzBC,QAAQ,EAAGC,QAAQ,IAAKtB,GAAG,CAACuB,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAC5DE,KAAK,EAAGC,WAAW,IAAKzB,GAAG,CAACuB,IAAI,CAAC,aAAa,EAAEE,WAAW,CAAC;EAC5DC,UAAU,EAAEA,CAAA,KAAM1B,GAAG,CAAC2B,GAAG,CAAC,eAAe;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,MAAM,EAAEA,CAAA,KAAM7B,GAAG,CAAC2B,GAAG,CAAC,UAAU,CAAC;EACjCG,OAAO,EAAGC,EAAE,IAAK/B,GAAG,CAAC2B,GAAG,CAAC,YAAYI,EAAE,EAAE,CAAC;EAC1C9B,MAAM,EAAG+B,IAAI,IAAKhC,GAAG,CAACuB,IAAI,CAAC,UAAU,EAAES,IAAI,CAAC;EAC5CC,MAAM,EAAEA,CAACF,EAAE,EAAEC,IAAI,KAAKhC,GAAG,CAACkC,GAAG,CAAC,YAAYH,EAAE,EAAE,EAAEC,IAAI,CAAC;EACrDG,MAAM,EAAGJ,EAAE,IAAK/B,GAAG,CAACmC,MAAM,CAAC,YAAYJ,EAAE,EAAE,CAAC;EAC5CK,MAAM,EAAGC,KAAK,IAAKrC,GAAG,CAAC2B,GAAG,CAAC,yBAAyBU,KAAK,EAAE,CAAC;EAC5DC,MAAM,EAAEA,CAACvB,MAAM,EAAEwB,IAAI,KAAK;IACxB,IAAIC,GAAG,GAAG,kBAAkB;IAC5B,IAAIzB,MAAM,EAAEyB,GAAG,IAAI,UAAUzB,MAAM,GAAG;IACtC,IAAIwB,IAAI,EAAEC,GAAG,IAAI,QAAQD,IAAI,EAAE;IAC/B,OAAOvC,GAAG,CAAC2B,GAAG,CAACa,GAAG,CAAC;EACrB;AACF,CAAC;AAED,eAAexC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}